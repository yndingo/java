1. Дайте определение понятию “исключение”
Исключение - это нештатная ситуация, ошибка во время выполнения программы
2. Какова иерархия исключений.
Исключения имеют общего предка — класс Throwable. Его потомками являются подклассы Exception и Error. Exception в свою очередь делится на Checked и Uncheked.
3. Можно/нужно ли обрабатывать ошибки jvm?
Обрабатывать можно, но делать этого не стоит. Разработчику не предоставлены инструменты для обработки ошибок системы и виртуальной машины
4. Какие существуют способы обработки исключений?
    try – данное ключевое слово используется для отметки начала блока кода, который потенциально может привести к ошибке.
    catch – ключевое слово для отметки начала блока кода, предназначенного для перехвата и обработки исключений.
    finally – ключевое слово для отметки начала блока кода, которой является дополнительным. Этот блок помещается после последнего блока ‘catch’. Управление обычно передаётся в блок ‘finally’ в любом случае.
    throw – служит для генерации исключений.
    throws – ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может выбросить исключение с указанным типом.
5. О чем говорит ключевое слово throws?
ключевое слово, которое прописывается в сигнатуре метода, и обозначающее что метод потенциально может выбросить исключение с указанным типом.
6. В чем особенность блока finally? Всегда ли он исполняется?
finally создаёт блок кода, который будет выполнен после завершения блока try/catch, но перед кодом, следующим за ним. Блок будет выполнен, независимо от того, передано исключение или нет. Оператор finally не обязателен, однако каждый оператор try требует наличия либо catch, либо finally. Код в блоке finally будет выполнен почти всегда(умирает поток или предшествует системный выход).
7. Может ли не быть ни одного блока catch при отлавливании исключений?
да
8. Могли бы вы придумать ситуацию, когда блок finally не будет выполнен?
умирает поток или предшествует системный выход
9. Может ли один блок catch отлавливать несколько исключений (с одной и разных веток наследований)?
да
10. Что вы знаете об обрабатываемых и не обрабатываемых (checked/unchecked) исключениях?
Checked исключения, это те, которые должны обрабатываться блоком catch или описываться в сигнатуре метода. Unchecked могут не обрабатываться и не быть описанными.
Unchecked исключения в Java – наследованные от RuntimeException, checked – от Exception (не включая unchecked).
11. В чем особенность RuntimeException?
public class RuntimeException extends Exception – базовый класс для ошибок во время выполнения. Относится к необрабатываемым исключениям (uncatched\unchecked). Как сказано в описании класса – это суперкласс, исключения которого могут быть выброшены во время нормальной работы JVM
12. Как написать собственное (“пользовательское”) исключение? Какими мотивами вы будете руководствоваться при выборе типа исключения: checked/unchecked?
Необходимо унаследоваться от базового класса требуемого типа исключений (например от Exception или RuntimeException).
Руководствоваться нужно определением типа исключения. В зависимости от того, что вы хотите обрабатывать или видеть нужно и наследоваться от нужного класса
13. Какой оператор позволяет принудительно выбросить исключение?
throw new Exception();
14. Есть ли дополнительные условия к методу, который потенциально может выбросить исключение?
Если это проверяемое исключение, то оно должно быть задекларировано в сигнатуре метода
15. Может ли метод main выбросить исключение во вне и если да, то где будет происходить обработка данного исключения?
Может и оно будет передано в виртуальную машину Java (JVM).
16. Если оператор return содержится и в блоке catch и в finally, какой из них “главнее”?
в finally
17. Что вы знаете о OutOfMemoryError?
OutOfMemoryError выбрасывается, когда виртуальная машина Java не может выделить (разместить) объект из-за нехватки памяти, а сборщик мусора не может высвободить ещё
18. Что вы знаете о SQLException? К какому типу checked или unchecked оно относится, почему?
SQLException предоставляет информацию об ошибках доступа к базе данных или других ошибках связанных с работой с базами данных.
Относится к checked исключениям.
Сделав SQLException проверяемым – это попытка заставить разработчиков обработать исключение и обернуть его в новом уровне абстракции.
19. Что такое Error? В каком случае используется Error. Приведите пример Error’а.
Ошибки (Errors) представляют собой более серьёзные проблемы, которые, согласно спецификации Java, не следует пытаться обрабатывать в собственной программе, поскольку они связаны с проблемами уровня JVM. Например, исключения такого рода возникают, если закончилась память, доступная виртуальной машине OutOfMemoryError.
20. Какая конструкция используется в Java для обработки исключений?
try-catch-finally и try-with-resources
21. Предположим, есть блок try-finally. В блоке try возникло исключение и выполнение переместилось в блок finally. В блоке finally тоже возникло исключение. Какое из двух исключений “выпадет” из блока try-finally? Что случится со вторым исключением?
“выпадет” из finally блока. Исключение в try будет перезаписано в finally другим исключением.
22. Предположим, есть метод, который может выбросить IOException и FileNotFoundException в какой последовательности должны идти блоки catch? Сколько блоков catch будет выполнено?
сначала нужно обработать FileNotFoundException, а затем уже IOException. Будет выполнен один блок.